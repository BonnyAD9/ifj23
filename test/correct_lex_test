===========================================================
                 Starting lexer testing
===========================================================

[Line_location] - Token location on the LINE
Token line [1]
Token line [2]
Token line [2]
Token line [2]
Token line [3]
Token line [4]

[Column_location] - Token location on the COLUMN
Token column:[1]
Token column:[5]
Token column:[6]
Token column:[7]
Token column:[1]
Token column:[4]

[Comment_test1] - Testing - //

[Comment_test2] - Testing - /**/

[Comment_test3] - Testing - // and /**/

[Comment_test4] - Testing - Tokens with //
Token: [  | 271] [return]
Token: [  | 256] [ret]

[Comment_test5] - Testing - Tokens with /**/
Token: [  | 271] [return]
Token: [  | 256] [ret]

[String_write1] - Basic string print using write()
Token: [  | 256] [write]
Token: [( | 40] []
Token: [  | 258] [adejte cislo pro vypocet faktorialu:
]
Token: [) | 41] []

[String_write2] - Advanced string print using write()
Token: [  | 256] [write]
Token: [( | 40] []
Token: [  | 258] [hoj
"Sve'te \"]
Token: [) | 41] []

[String_write3] - Advanced string print with variable using write()
Token: [  | 256] [write]
Token: [( | 40] []
Token: [  | 256] [str1]
Token: [, | 44] []
Token: [  | 258] [n]
Token: [, | 44] []
Token: [  | 256] [str2]
Token: [, | 44] []
Token: [  | 258] [n]
Token: [) | 41] []

[String_write4] - Advanced string print with variable using write()
Token: [  | 256] [write]
Token: [( | 40] []
Token: [  | 258] [ozice retezce "text" v str2: ]
Token: [, | 44] []
Token: [  | 256] [i]
Token: [, | 44] []
Token: [  | 258] [n]
Token: [) | 41] []

[Conditions1] - If condition test
Token: [  | 268] [if]
Token: [  | 272] [let]
Token: [  | 256] [a]
Token: [{ | 123] []

[Conditions2] - If condition test
Token: [  | 268] [if]
Token: [( | 40] []
Token: [  | 256] [a]
Token: [< | 60] []
Token: [  | 259] [0]
Token: [) | 41] []

[Conditions3] - If condition test
Token: [  | 269] [else]
Token: [{ | 123] []

[Return1] - Basic return test
Token: [  | 271] [return]
Token: [  | 256] [result]

[Return2] - Advanced return test
Token: [  | 271] [return]
Token: [  | 256] [x]
Token: [+ | 43] []
Token: [  | 258] []
Token: [+ | 43] []
Token: [  | 256] [y]

[Cycles1] - Basic cycle test
Token: [  | 270] [while]
Token: [( | 40] []
Token: [  | 256] [a]
Token: [> | 62] []
Token: [  | 259] [0]
Token: [) | 41] []
Token: [{ | 123] []

[Cycles2] - Advanced cycle test
Token: [  | 270] [while]
Token: [( | 40] []
Token: [  | 256] [str1]
Token: [  | 263] []
Token: [  | 258] [bcdefgh]
Token: [) | 41] []
Token: [{ | 123] []

[Functions1] - Basic function test
Token: [  | 267] [func]
Token: [  | 256] [bar]
Token: [( | 40] []
Token: [  | 256] [with]
Token: [  | 256] [param]
Token: [: | 58] []
Token: [  | 273] [String]
Token: [) | 41] []
Token: [  | 261] []
Token: [  | 273] [String]
Token: [{ | 123] []

[Functions2] - Basic function test
Token: [  | 267] [func]
Token: [  | 256] [foo]
Token: [( | 40] []
Token: [_ | 95] [_]
Token: [  | 256] [par]
Token: [: | 58] []
Token: [  | 273] [String]
Token: [) | 41] []
Token: [  | 261] []
Token: [  | 273] [String]
Token: [{ | 123] []

[Functions3] - Basic combined function test
Token: [  | 267] [func]
Token: [  | 256] [concat]
Token: [( | 40] []
Token: [_ | 95] [_]
Token: [  | 256] [x]
Token: [: | 58] []
Token: [  | 273] [Double]
Token: [, | 44] []
Token: [  | 256] [with]
Token: [  | 256] [y]
Token: [: | 58] []
Token: [  | 273] [Double]
Token: [) | 41] []
Token: [  | 261] []
Token: [  | 273] [Double]
Token: [{ | 123] []

[Functions4] - Basic combined function test
Token: [  | 267] [func]
Token: [  | 256] [decrement]
Token: [( | 40] []
Token: [  | 256] [of]
Token: [  | 256] [n]
Token: [: | 58] []
Token: [  | 273] [Int]
Token: [, | 44] []
Token: [  | 256] [by]
Token: [  | 256] [m]
Token: [: | 58] []
Token: [  | 273] [Int]
Token: [) | 41] []
Token: [  | 261] []
Token: [  | 273] [Int]
Token: [{ | 123] []

[Function_calls1] - Basic function call test
Token: [  | 256] [bar]
Token: [( | 40] []
Token: [  | 256] [with]
Token: [: | 58] []
Token: [  | 258] [hoj]
Token: [) | 41] []

[Function_calls2] - Basic function call test
Token: [  | 256] [str1]
Token: [= | 61] []
Token: [  | 256] [readString]
Token: [( | 40] []
Token: [) | 41] []
Token: [  | 266] []
Token: [  | 258] []

[Variables_var1] - Basic variables [var] test
Token: [  | 272] [var]
Token: [  | 256] [str1]
Token: [= | 61] []
Token: [  | 258] [oto je nejaky text v programu jazyka IFJ23]

[Variables_var2] - Basic variables [var] test
Token: [  | 272] [var]
Token: [  | 256] [vysl]
Token: [: | 58] []
Token: [  | 273] [Double]
Token: [= | 61] []
Token: [  | 259] [1]

[Variables_var3] - Basic variables [var] test
Token: [  | 272] [var]
Token: [  | 256] [result]
Token: [: | 58] []
Token: [  | 273] [Int]
Token: [? | 63] []

[Variables_var4] - Basic variables [var] test
Token: [  | 272] [var]
Token: [  | 256] [ct]
Token: [: | 58] []
Token: [  | 273] [String]

[Variables_let1] - Basic variables [let] test
Token: [  | 272] [let]
Token: [  | 256] [str2]
Token: [= | 61] []
Token: [  | 256] [str1]
Token: [+ | 43] []
Token: [  | 258] [ ktery jeste trochu obohatime]

[Variables_let2] - Basic variables [let] test
Token: [  | 272] [let]
Token: [  | 256] [r]
Token: [: | 58] []
Token: [  | 273] [String]
Token: [= | 61] []
Token: [  | 256] [foo]
Token: [( | 40] []
Token: [  | 256] [param]
Token: [) | 41] []

[Variables_let3] - Basic variables [let] test
Token: [  | 272] [let]
Token: [  | 256] [ret]
Token: [= | 61] []
Token: [  | 256] [bar]
Token: [( | 40] []
Token: [  | 256] [with]
Token: [: | 58] []
Token: [  | 256] [par]
Token: [) | 41] []

[Variables_let4] - Basic variables [let] test
Token: [  | 272] [let]
Token: [  | 256] [x]
Token: [= | 61] []
Token: [  | 256] [x]
Token: [+ | 43] []
Token: [  | 256] [y]

[Variables_let5] - Basic variables [let] test
Token: [  | 272] [let]
Token: [  | 256] [a]
Token: [: | 58] []
Token: [  | 273] [Int]
Token: [? | 63] []
Token: [= | 61] []
Token: [  | 256] [readInt]
Token: [( | 40] []
Token: [) | 41] []

===========================================================
                 Ending lexer testing
===========================================================
